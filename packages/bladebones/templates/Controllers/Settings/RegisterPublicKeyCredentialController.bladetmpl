@php
    $flavorTrait = str_replace("-", "", \Illuminate\Support\Str::title($flavor));
@endphp

namespace App\Http\Controllers\Auth\Settings;

use ClaudioDekker\LaravelAuth\Http\Controllers\Settings\RegisterPublicKeyCredentialController as BaseController;
@if ($flavor !== 'email-based')
use ClaudioDekker\LaravelAuth\Http\Modifiers\{{ $flavorTrait }};
@endif
use ClaudioDekker\LaravelAuth\Specifications\WebAuthn\Dictionaries\PublicKeyCredentialCreationOptions;
use ClaudioDekker\WordGenerator\Generator;
use Illuminate\Contracts\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;

class RegisterPublicKeyCredentialController extends BaseController
{
@php
    $uses = [];
    if ($flavor !== 'email-based') {
        $uses[] = $flavorTrait;
    }

    asort($uses);
@endphp
@if (count($uses) > 0)
@foreach($uses as $use)
    use {{ $use }};
@endforeach

@endif
    /**
     * Initialize and display the view for registering a new public key credential.
     *
     * {!! '@' !!}see static::sendRegistrationPageResponse()
     */
    public function create(Request $request): View
    {
        return parent::create($request);
    }

    /**
     * Complete the registration of a new public key credential.
     *
     * {!! '@' !!}see static::sendInvalidPublicKeyRegistrationStateResponse()
     * {!! '@' !!}see static::sendInvalidPublicKeyCredentialResponse()
     * {!! '@' !!}see static::sendCredentialRegisteredResponse()
     */
    public function store(Request $request): JsonResponse
    {
        return parent::store($request);
    }

    /**
     * Sends a response that displays the public key registration page.
     */
    protected function sendRegistrationPageResponse(Request $request, PublicKeyCredentialCreationOptions $options): View
    {
        return view('auth.settings.confirm_public_key', [
            'options' => $options,
            'randomName' => Generator::generate('-'),
        ]);
    }

    /**
     * Sends a response indicating that the public key credential has been registered.
     *
     * {!! '@' !!}param  \ClaudioDekker\LaravelAuth\MultiFactorCredential  $credential
     */
    protected function sendCredentialRegisteredResponse(Request $request, $credential): JsonResponse
    {
        $request->session()->flash('status', __('laravel-auth::auth.settings.public-key-registered'));

        return new JsonResponse(['status' => 'success'], 201);
    }

    /**
     * Sends a response indicating that the public key credential registration state is invalid.
     *
     * {!! '@' !!}throws \Symfony\Component\HttpKernel\Exception\HttpException
     */
    protected function sendInvalidPublicKeyRegistrationStateResponse(Request $request): void
    {
        abort(428, 'The current security key registration state is invalid.');
    }

    /**
     * Sends a response indicating that the provided public key credential is not valid.
     *
     * {!! '@' !!}throws \Illuminate\Validation\ValidationException
     */
    protected function sendInvalidPublicKeyCredentialResponse(Request $request): void
    {
        throw ValidationException::withMessages([
            'credential' => __('laravel-auth::auth.challenge.public-key'),
        ]);
    }
}
