@php
    $flavorTrait = str_replace("-", "", \Illuminate\Support\Str::title($flavor));

    $traits = [];
    if ($withoutEmailVerification) {
        $traits[] = "ClaudioDekker\LaravelAuth\Http\Traits\WithoutVerificationEmail";
    }

    if ($flavor !== 'email-based') {
        $traits[] = "ClaudioDekker\LaravelAuth\Http\Traits\\" . $flavorTrait;
    }

    asort($traits);
@endphp

namespace App\Http\Controllers\Auth;

use ClaudioDekker\LaravelAuth\Http\Controllers\RegisterController as BaseController;
@if (count($traits) > 0)
@foreach($traits as $trait)
use {{ $trait }};
@endforeach
@endif
use ClaudioDekker\LaravelAuth\Specifications\WebAuthn\Dictionaries\PublicKeyCredentialCreationOptions;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Contracts\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;

class RegisterController extends BaseController
{
@php
    $uses = [];
    if ($withoutEmailVerification) {
        $uses[] = "WithoutVerificationEmail";
    }

    if ($flavor !== 'email-based') {
        $uses[] = $flavorTrait;
    }

    asort($uses);
@endphp
@if (count($uses) > 0)
@foreach($uses as $use)
    use {{ $use }};
@endforeach

@endif
    /**
     * Display the registration view.
     */
    public function create(Request $request): View
    {
        return parent::create($request);
    }

    /**
     * Handle an incoming registration request.
     */
    public function store(Request $request): JsonResponse
    {
        return parent::store($request);
    }

    /**
     * Sends a response indicating that the passkey-based registration process has been initialized.
     */
    protected function sendPasskeyBasedRegistrationInitializedResponse(Request $request, PublicKeyCredentialCreationOptions $options): JsonResponse
    {
        return new JsonResponse($options);
    }

    /**
     * Sends a response indicating that the passkey-based registration state is invalid.
     *
     * {!! '@' !!}throws \Symfony\Component\HttpKernel\Exception\HttpException
     */
    protected function sendInvalidPasskeyRegistrationStateResponse(Request $request): void
    {
        abort(428, 'The current passkey registration state is invalid.');
    }

    /**
     * Sends a response indicating that the passkey-based registration process has been cancelled.
     */
    protected function sendPasskeyRegistrationCancelledResponse(Request $request): JsonResponse
    {
        return new JsonResponse([
            'message' => 'The passkey registration has been cancelled.',
        ], 200);
    }

    /**
     * Sends a response indicating that the signed passkey is not valid.
     *
     * {!! '@' !!}throws \Illuminate\Validation\ValidationException
     */
    protected function sendInvalidPasskeyResponse(Request $request): void
    {
        throw ValidationException::withMessages([
            'credential' => 'The credential field is invalid.',
        ]);
    }

    /**
     * Sends a response indicating that the user has successfully registered.
     */
    protected function sendRegisteredResponse(Request $request, Authenticatable $user): JsonResponse
    {
        return new JsonResponse([
            'redirect_url' => $this->redirectUrl($request, $user),
        ], 201);
    }
}
