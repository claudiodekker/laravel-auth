@php
    $flavorTrait = str_replace("-", "", \Illuminate\Support\Str::title($flavor));
@endphp

namespace App\Http\Controllers\Auth\Challenges;

use ClaudioDekker\LaravelAuth\Http\Controllers\Challenges\SudoModeChallengeController as BaseController;
@if ($flavor !== 'email-based')
use ClaudioDekker\LaravelAuth\Http\Traits\{{ $flavorTrait }};
@endif
@if ($withoutRateLimiting)
use ClaudioDekker\LaravelAuth\Http\Traits\WithoutRateLimiting;
@endif
use ClaudioDekker\LaravelAuth\Specifications\WebAuthn\Dictionaries\PublicKeyCredentialRequestOptions;
use Illuminate\Contracts\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;

class SudoModeChallengeController extends BaseController
{
@php
    $uses = [];
    if ($withoutRateLimiting) {
        $uses[] = "WithoutRateLimiting";
    }

    if ($flavor !== 'email-based') {
        $uses[] = $flavorTrait;
    }

    asort($uses);
@endphp
@if (count($uses) > 0)
@foreach($uses as $use)
    use {{ $use }};
@endforeach

@endif
    /**
     * Display the sudo-mode challenge view.
     *
     * {!! '@' !!}see static::sendConfirmationNotRequiredResponse()
     * {!! '@' !!}see static::sendChallengePageResponse()
     */
    public function create(Request $request): View
    {
        return parent::create($request);
    }

    /**
     * Verify the sudo-mode confirmation request.
     *
     * {!! '@' !!}see static::sendConfirmationNotRequiredResponse()
@if (!$withoutRateLimiting)
     * {!! '@' !!}see static::sendRateLimitedResponse()
@endif
     * {!! '@' !!}see static::sendPasswordChallengeFailedResponse()
     * {!! '@' !!}see static::sendInvalidPublicKeyChallengeStateResponse()
     * {!! '@' !!}see static::sendPublicKeyChallengeFailedResponse()
     * {!! '@' !!}see static::sendSudoModeEnabledResponse()
     */
    public function store(Request $request): JsonResponse
    {
        return parent::store($request);
    }

    /**
     * Sends a response that displays the sudo-mode challenge page.
     */
    protected function sendChallengePageResponse(Request $request, ?PublicKeyCredentialRequestOptions $options): View
    {
        return view('auth.challenges.sudo_mode', [
            'canUsePassword' => $this->supportsPasswordBasedConfirmation($request),
            'options' => $options,
        ]);
    }

    /**
     * Sends a response indicating that sudo-mode has been enabled.
     */
    protected function sendSudoModeEnabledResponse(Request $request): JsonResponse
    {
        return new JsonResponse([
            'redirect_url' => $this->intendedLocation($request),
        ], 200);
    }

    /**
     * Sends a response indicating that sudo-mode is currently not required.
     *
     * {!! '@' !!}throws \Symfony\Component\HttpKernel\Exception\HttpException
     */
    protected function sendConfirmationNotRequiredResponse(Request $request): void
    {
        abort(400, 'Sudo-mode confirmation not required.');
    }

    /**
     * Sends a response indicating that the password challenge did not succeed.
     *
     * {!! '@' !!}throws \Illuminate\Validation\ValidationException
     */
    protected function sendPasswordChallengeFailedResponse(Request $request): void
    {
        throw ValidationException::withMessages([
            'password' => __('laravel-auth::auth.password'),
        ]);
    }

    /**
     * Sends a response indicating that the public key challenge state is invalid.
     *
     * {!! '@' !!}throws \Symfony\Component\HttpKernel\Exception\HttpException
     */
    protected function sendInvalidPublicKeyChallengeStateResponse(Request $request): void
    {
        abort(428, 'The current confirmation state is invalid.');
    }

    /**
     * Sends a response indicating that the public key challenge did not succeed.
     *
     * {!! '@' !!}throws \Illuminate\Validation\ValidationException
     */
    protected function sendPublicKeyChallengeFailedResponse(Request $request): void
    {
        throw ValidationException::withMessages([
            'credential' => __('laravel-auth::auth.challenge.public-key'),
        ]);
    }
@if (!$withoutRateLimiting)

    /**
     * Sends a response indicating that the user's requests have been rate limited.
     *
     * {!! '@' !!}throws \Illuminate\Validation\ValidationException
     */
    protected function sendRateLimitedResponse(Request $request, int $availableInSeconds): void
    {
        throw ValidationException::withMessages([
            'password' => __('laravel-auth::auth.challenge.throttle', [
                'seconds' => $availableInSeconds,
                'minutes' => ceil($availableInSeconds / 60),
            ]),
        ]);
    }
@endif
}
