@php
    $flavorTrait = str_replace("-", "", \Illuminate\Support\Str::title($flavor));
@endphp

namespace App\Http\Controllers\Auth\Challenges;

use ClaudioDekker\LaravelAuth\Http\Controllers\Challenges\MultiFactorChallengeController as BaseController;
@if ($flavor !== 'email-based')
use ClaudioDekker\LaravelAuth\Http\Traits\{{ $flavorTrait }};
@endif
@if ($withoutRateLimiting)
use ClaudioDekker\LaravelAuth\Http\Traits\WithoutRateLimiting;
@endif
use ClaudioDekker\LaravelAuth\Specifications\WebAuthn\Dictionaries\PublicKeyCredentialRequestOptions;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Contracts\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Session;
use Illuminate\Validation\ValidationException;

class MultiFactorChallengeController extends BaseController
{
@php
    $uses = [];
    if ($withoutRateLimiting) {
        $uses[] = "WithoutRateLimiting";
    }

    if ($flavor !== 'email-based') {
        $uses[] = $flavorTrait;
    }

    asort($uses);
@endphp
@if (count($uses) > 0)
@foreach($uses as $use)
    use {{ $use }};
@endforeach

@endif
    /**
     * Handle an incoming request to view the multi-factor challenge page.
     */
    public function create(Request $request): View|RedirectResponse
    {
        return parent::create($request);
    }

    /**
     * Handle an incoming multi-factor challenge confirmation request.
     */
    public function store(Request $request): JsonResponse
    {
        return parent::store($request);
    }

    /**
     * Sends a response that displays the multi-factor challenge page.
     */
    protected function sendChallengePageResponse(Request $request, PublicKeyCredentialRequestOptions|null $options, Collection $availableCredentialTypes): View
    {
        return view('auth.challenges.multi_factor', [
            'availableMethods' => $availableCredentialTypes,
            'intendedLocation' => $this->intendedLocation($request),
            'options' => $options,
        ]);
    }

    /**
     * Sends a response indicating that the user has been successfully authenticated.
     */
    protected function sendAuthenticatedResponse(Request $request, Authenticatable $user, string $intendedUrl): JsonResponse|RedirectResponse
    {
        Session::flash('status', __('laravel-auth::auth.success'));

        if (! $request->wantsJson()) {
            return redirect()->to($intendedUrl);
        }

        return new JsonResponse([
            'redirect_url' => $intendedUrl,
        ], 200);
    }

    /**
     * Sends a response indicating that the public key credential challenge state is invalid.
     *
     * {!! '@' !!}throws \Symfony\Component\HttpKernel\Exception\HttpException
     */
    protected function sendInvalidPublicKeyChallengeStateResponse(Request $request): void
    {
        abort(428, 'The current authentication challenge state is invalid.');
    }

    /**
     * Sends a response indicating that the multi-factor challenge has failed.
     *
     * This can be for a large number of reasons, including (but not limited to) a malformed request,
     * a non-existent credential, an invalid signature or confirmation code etc.
     *
     * {!! '@' !!}throws \Illuminate\Validation\ValidationException
     */
    protected function sendChallengeFailedResponse(Request $request): void
    {
        if (! $this->isPublicKeyConfirmationRequest($request)) {
            throw ValidationException::withMessages([
                'code' => __('laravel-auth::auth.challenge.totp'),
            ]);
        }

        throw ValidationException::withMessages([
            'credential' => __('laravel-auth::auth.challenge.public-key'),
        ]);
    }
@if (!$withoutRateLimiting)

    /**
     * Sends a response indicating that the user's requests have been rate limited.
     *
     * {!! '@' !!}throws \Illuminate\Validation\ValidationException
     */
    protected function sendRateLimitedResponse(Request $request, int $availableInSeconds): void
    {
        $key = $this->isPublicKeyConfirmationRequest($request) ? 'credential' : 'code';

        throw ValidationException::withMessages([
            $key => __('laravel-auth::auth.challenge.throttle', [
                'seconds' => $availableInSeconds,
                'minutes' => ceil($availableInSeconds / 60),
            ]),
        ]);
    }
@endif
}
