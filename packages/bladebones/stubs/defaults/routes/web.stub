<?php

use App\Http\Controllers\Auth\AccountRecoveryRequestController;
use App\Http\Controllers\Auth\Challenges\AccountRecoveryChallengeController;
use App\Http\Controllers\Auth\Challenges\MultiFactorChallengeController;
use App\Http\Controllers\Auth\Challenges\SudoModeChallengeController;
use App\Http\Controllers\Auth\LoginController;
use App\Http\Controllers\Auth\RegisterController;
use App\Http\Controllers\Auth\Settings\ChangePasswordController;
use App\Http\Controllers\Auth\Settings\CredentialsController;
use App\Http\Controllers\Auth\Settings\GenerateRecoveryCodesController;
use App\Http\Controllers\Auth\Settings\RegisterPublicKeyCredentialController;
use App\Http\Controllers\Auth\Settings\RegisterTotpCredentialController;
use App\Http\Controllers\Auth\VerifyEmailController;
use ClaudioDekker\LaravelAuth\Http\Middleware\EnsurePasswordBasedUser;
use ClaudioDekker\LaravelAuth\Http\Middleware\EnsurePreAuthenticated;
use ClaudioDekker\LaravelAuth\Http\Middleware\EnsureSudoMode;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::get('/', function () {
    return view('welcome');
});

Route::middleware('guest')->group(function () {
    Route::get('/auth/login', [LoginController::class, 'create'])->name('login');
    Route::post('/auth/login', [LoginController::class, 'store']);

    Route::middleware(EnsurePreAuthenticated::class)->group(function () {
        Route::get('/auth/login/challenge', [MultiFactorChallengeController::class, 'create'])->name('login.challenge');
        Route::post('/auth/login/challenge', [MultiFactorChallengeController::class, 'store']);
    });

    Route::get('/auth/recover-account', [AccountRecoveryRequestController::class, 'create'])->name('recover-account');
    Route::post('/auth/recover-account', [AccountRecoveryRequestController::class, 'store']);
    Route::get('/auth/recover-account/{token}', [AccountRecoveryChallengeController::class, 'create'])->name('recover-account.challenge');
    Route::post('/auth/recover-account/{token}', [AccountRecoveryChallengeController::class, 'store']);

    Route::get('/auth/register', [RegisterController::class, 'create'])->name('register');
    Route::post('/auth/register', [RegisterController::class, 'store']);
    Route::delete('/auth/register', [RegisterController::class, 'destroy']);
});

Route::middleware('auth')->group(function () {
    Route::get('/home', fn () => view('home'));

    Route::delete('/logout', [LoginController::class, 'destroy'])->name('logout');

    Route::middleware(EnsureSudoMode::class)->group(function () {
        Route::get('/settings/security', [CredentialsController::class, 'index'])->name('auth.settings');

        Route::post('/settings/security/generate-recovery-codes', [GenerateRecoveryCodesController::class, 'create'])->name('auth.settings.generate_recovery');
        Route::get('/settings/security/generate-recovery-codes/confirm', [GenerateRecoveryCodesController::class, 'confirm'])->name('auth.settings.generate_recovery.confirm');
        Route::post('/settings/security/generate-recovery-codes/confirm', [GenerateRecoveryCodesController::class, 'store']);

        Route::middleware(EnsurePasswordBasedUser::class)->group(function () {
            Route::put('/settings/security/password', [ChangePasswordController::class, 'update'])->name('auth.settings.password');

            // TOTP / Authenticator
            Route::post('/settings/security/credentials/register-authenticator', [RegisterTotpCredentialController::class, 'initialize'])->name('auth.credentials.register_totp');
            Route::delete('/settings/security/credentials/register-authenticator', [RegisterTotpCredentialController::class, 'cancel']);
            Route::get('/settings/security/credentials/register-authenticator/confirm', [RegisterTotpCredentialController::class, 'confirm'])->name('auth.credentials.register_totp.confirm');
            Route::post('/settings/security/credentials/register-authenticator/confirm', [RegisterTotpCredentialController::class, 'store']);

            // Public Key / Security Keys
            Route::get('/settings/security/credentials/register-security-key', [RegisterPublicKeyCredentialController::class, 'create'])->name('auth.credentials.register_public_key');
            Route::post('/settings/security/credentials/register-security-key', [RegisterPublicKeyCredentialController::class, 'store']);

            // Credential Deletion
            Route::delete('/settings/security/credentials/{id}', [CredentialsController::class, 'destroy'])->name('auth.credentials.destroy');
        });

        Route::post('/settings/verify-email', [VerifyEmailController::class, 'store'])->name('verification.send');
    });

    Route::get('/settings/verify-email/{id}/{hash}', [VerifyEmailController::class, 'update'])->middleware('signed')->name('verification.verify');

    Route::get('/sudo-mode', [SudoModeChallengeController::class, 'create'])->name('auth.sudo_mode');
    Route::post('/sudo-mode', [SudoModeChallengeController::class, 'store']);
});
